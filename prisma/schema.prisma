// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String
  roles     UserRole[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  OTP       OTP[]
  Expense   Expense[]

  @@map("users")
}

enum RoleEnum {
  USER
  ADMIN
}

enum ExpenseCategoryEnum {
  Housing
  HealthAndWellness
  Food
  Transportation
  Insurance
  Education
  Entertainment
  Clothing
  SavingsAndInvestments
  Other
}

enum IncomeCategoryEnum {
  Salary
  Freelance
  Business
  Investment
  Rental
  Pension
  GovernmentBenefits
  Gift
  Bonus
  Lottery
  Other
}

model Roles {
  id    Int        @id @default(autoincrement())
  type  RoleEnum
  users UserRole[]

  @@map("roles")
}

model UserRole {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int   @map("user_id")
  role   Roles @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int   @map("role_id")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model OTP {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  otp       String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("otp")
}

model ExpenseCategory {
  id   Int                 @id @default(autoincrement())
  name ExpenseCategoryEnum

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  expenses Expense[]

  @@map("expense_category")
}

model Expense {
  id          Int      @id @default(autoincrement())
  date        DateTime
  title       String
  description String?
  totalAmount Int      @map("total_amount")

  expenseCategory   ExpenseCategory @relation(fields: [expenseCategoryId], references: [id])
  expenseCategoryId Int             @map("expense_category_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int             @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("expense")
}

model IncomeSource {
  id   Int                @id @default(autoincrement())
  name IncomeCategoryEnum

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("income_source")
}
